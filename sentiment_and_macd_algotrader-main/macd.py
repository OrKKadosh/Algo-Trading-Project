# -*- coding: utf-8 -*-
"""MACD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YQ4zcEtkb2OYLvPBk6K8w7WUhUT183Vg

# Defines for users
"""

#Defines for us, can be changed according to the needs of our project

#Tickers to get MACD information about.
#If it's empty, it takes all stocks from s&p500
tickers_for_MACD = {}#'AAPL', 'MSFT', 'ZTS', 'AMZN', 'TSLA', 'MMM'}

#Dates we want get MACD information about:
MACD_start_date = '2022-06-05'
MACD_end_date = '2023-06-05'


#If data_for_all_sp500 == True, it downloads all s&p stocks data
#If data_for_all_sp500 == False, it downloads just tickers_for_MACD stocks data
#Its better to use data_for_all_sp500=True and save the csv file
data_for_all_sp500=True

#Output file name
daily_file_name = f"Daily_Optimized_MACD_{MACD_start_date}_{MACD_end_date}.csv"
weekly_file_name = f"Weekly_Optimized_MACD_{MACD_start_date}_{MACD_end_date}.csv"

"""#Includes (Can be hidden)

"""

# # Install the required packages
# ! pip install beautifulsoup4
# ! pip install yfinance
# #! pip install pyti
# #! pip3 install backtesting
# ! pip install pandas_ta

from bs4 import BeautifulSoup as bs
import requests
import yfinance as yf
import pandas as pd
from datetime import datetime, date, timedelta
from os.path import exists
import pandas_ta as ta

"""#Defines for program (Can be Hidden)"""

date_format = '%Y-%m-%d'
#for daily MACD
days_before_MACD_start_date = 3*30

#for weekly MACD
weeks_before_MACD_start_date = 45

"""# Get Stocks daily OHLC data (Can be hidden)
NOTE: dates here are earlier than MACD_start_date.

"""

resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
soup = bs(resp.text, 'lxml')
table = soup.find('table', {'class': 'wikitable sortable'})
tickers = []

for row in table.findAll('tr')[1:]:
    ticker = row.findAll('td')[0].text
    tickers.append(ticker)

all_stocks = [x.replace('\n','') for x in tickers] # remove the new line character

if(len(tickers_for_MACD) == 0):
  tickers_for_MACD = all_stocks

#Converting MACD dates defined above to relevant dates for OHLC data
MACD_start_date_datetime = datetime.strptime(MACD_start_date, date_format)
result_date_datetime = MACD_start_date_datetime - timedelta(days=days_before_MACD_start_date)
start_date_daily = result_date_datetime.strftime(date_format)
end_date_daily = MACD_end_date

print("Start date for daily OHLC data: " + str(start_date_daily))
print("End date for daily OHLC data: " + str(end_date_daily))

all_df_daily = pd.DataFrame()
fname_string_daily = 'all_stocks_daily_' + start_date_daily + '_' + end_date_daily + '.csv'

if not exists(fname_string_daily):
  for tkr in (all_stocks if data_for_all_sp500 else tickers_for_MACD):
    single_stock_pd = yf.download(tickers=tkr, start=start_date_daily, end=end_date_daily,auto_adjust=True)

    single_stock_pd['stock'] = tkr
    all_df_daily = pd.concat([all_df_daily, single_stock_pd])
    #all_df = all_df.append(single_stock_pd)

  all_df_daily.to_csv(fname_string_daily)

all_df_daily = pd.read_csv(fname_string_daily)
all_df_daily['dt'] = pd.to_datetime(all_df_daily['Date'])
all_df_daily['t0'] = (all_df_daily['dt'] - all_df_daily['dt'].min()).dt.days.astype(float)

"""# Get Stocks weekly OHLC data (Can be hidden)
NOTE: dates here are earlier than MACD_start_date.

"""

MACD_start_date_datetime = datetime.strptime(MACD_start_date, date_format)
result_date_datetime = MACD_start_date_datetime - timedelta(weeks=weeks_before_MACD_start_date)
start_date_weekly = result_date_datetime.strftime(date_format)
end_date_weekly = MACD_end_date
print("Start date for weekly OHLC data: " + str(start_date_weekly))
print("End date for weekly OHLC data: " + str(end_date_weekly))

all_df_weekly = pd.DataFrame()
fname_string_weekly = 'all_stocks_weekly_' + start_date_weekly + '_' + end_date_weekly + '.csv'

if not exists(fname_string_weekly):
  for tkr in (all_stocks if data_for_all_sp500 else tickers_for_MACD):
    single_stock_pd = yf.download(tickers=tkr, start=start_date_weekly, end=end_date_weekly,auto_adjust=True, interval = "1wk")
    single_stock_pd['stock'] = tkr
    all_df_weekly = pd.concat([all_df_weekly, single_stock_pd])
    #all_df_weekly = all_df_weekly.append(single_stock_pd)

  all_df_weekly.to_csv(fname_string_weekly)

all_df_weekly = pd.read_csv(fname_string_weekly)
all_df_weekly['dt'] = pd.to_datetime(all_df_weekly['Date'])
all_df_weekly['t0'] = (all_df_weekly['dt'] - all_df_weekly['dt'].min()).dt.days.astype(float) / 7

"""# Create MACD & ATR data frame based on OHLC data (Can be hidden)




"""

#only_MACD_dates should be True, because these are the dates which are relevants for us (MACD_start_date till MACD_end_date defined at the top).
#Notice that the dates taken in OHLC data are already changed to be early, so we don't need change anything here (See NOTE in "Get Stocks daily OHLC data" header)

def create_MACD_ATR_df(ohlc_data, only_MACD_dates = True):
  MACD_df = ohlc_data.copy()
  MACD_df['MACD_Line'] = 0
  MACD_df['Signal_Line'] = 0
  MACD_df['MACD_Histogram'] = 0
  #ATR
  MACD_df['ATR'] = 0

  for ticker in tickers_for_MACD:
    one_stock_df = ohlc_data[ohlc_data['stock'] == ticker]
    ema_12 = one_stock_df['Close'].ewm(span=12).mean()
    ema_26 = one_stock_df['Close'].ewm(span=26).mean()

    macd_line = ema_12 - ema_26
    signal_line = macd_line.ewm(span=9).mean()
    macd_histogram = macd_line - signal_line

    MACD_df.loc[MACD_df['stock'] == ticker, 'MACD_Line'] = macd_line
    MACD_df.loc[MACD_df['stock'] == ticker, 'Signal_Line'] = signal_line
    MACD_df.loc[MACD_df['stock'] == ticker, 'MACD_Histogram'] = macd_histogram
    #ATR
    atr = []
    try:
      atr = ta.atr(one_stock_df['High'], one_stock_df['Low'], one_stock_df['Close'], length=14).values
    except:
      atr = []

    MACD_df.loc[MACD_df['stock'] == ticker, 'ATR'] = atr


  return MACD_df[(MACD_df['dt'] >= MACD_start_date) & (MACD_df['dt'] <= MACD_end_date)] if only_MACD_dates else MACD_df

def optimized_MACD_df(OHLC_df):
  output_df = create_MACD_ATR_df(OHLC_df)
  output_df["Optimized MACD"] = output_df["MACD_Histogram"] / output_df["ATR"]
  return output_df[["stock", "Date", "MACD_Histogram", "ATR", "Optimized MACD"]]

"""#Tests"""

#test optimized_MACD_df
final_df = optimized_MACD_df(all_df_daily)

final_df[final_df['stock'] == 'AMZN']

final_df.to_csv(daily_file_name, index=False)

all_df_weekly

weekly_final_df = optimized_MACD_df(all_df_weekly)
weekly_final_df

weekly_final_df.to_csv(weekly_file_name, index=False)